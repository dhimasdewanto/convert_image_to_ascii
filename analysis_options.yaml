include: all_lint_rules.yaml

analyzer:
  exclude:
    - "**/*.g.dart"
    - "**/*.gr.dart"
    - "**/*.freezed.dart"
    - "**/*.config.dart"
    
  strong-mode:
    implicit-casts: true
    implicit-dynamic: true

  errors:
    # Otherwise cause the import of all_lint_rules to warn because of some rules conflicts.
    # We explicitly enabled even conflicting rules and are fixing the conflict
    # in this file
    included_file_warning: ignore

    # Causes false positives (https://github.com/dart-lang/sdk/issues/41571
    top_level_function_literal_block: ignore

    # All of this should be error.
    missing_required_param: error
    parameter_assignments: error
    missing_return: error
    must_be_immutable: error
    invalid_use_of_protected_member: error

linter:
  rules:
    # First world problem.
    # Different people different background of programming language.
    prefer_double_quotes: false
    prefer_single_quotes: false

    # Conflicts with `omit_local_variable_types` and other rules.
    # As per Dart guidelines, we want to avoid unnecessary types to make the code
    # more readable.
    # See https://dart.dev/guides/language/effective-dart/design#avoid-type-annotating-initialized-local-variables
    always_specify_types: false

    # Incompatible with `prefer_final_locals`
    # Having immutable local variables makes larger functions more predictible
    # so we will use `prefer_final_locals` instead.
    unnecessary_final: false

    # Not quite suitable for Flutter, which may have a `build` method with a single
    # return, but that return is still complex enough that a "body" is worth it.
    prefer_expression_function_bodies: false

    # Conflicts with the convention used by flutter, which puts `Key key`
    # and `@required Widget child` last.
    always_put_required_named_parameters_first: false

    # `as` is not that bad (especially with the upcoming non-nullable types).
    # Explicit exceptions is better than implicit exceptions.
    avoid_as: false

    # There are situations where we voluntarily want to catch everything,
    # especially as a library.
    avoid_catches_without_on_clauses: false

    # Conflicts with disabling `implicit-dynamic`
    avoid_annotating_with_dynamic: false

    # Not nessecary for an application and more pointed towards public API's
    public_member_api_docs: false
    diagnostic_describe_all_properties: false

    # Still readable without it.
    always_put_control_body_on_new_line: false

    # I found use `for in` more readable.
    prefer_foreach: false

    # Need this for data class generator (VSCode extension).
    # You probably doesn't know what it is.
    avoid_equals_and_hash_code_on_mutable_classes: false
    avoid_renaming_method_parameters: false

    # Not OOP friendly, and I not use to it.
    one_member_abstracts: false

    # Bug for Dart Stream.
    # See https://github.com/felangel/bloc/issues/587
    close_sinks: false

    # Not find more readable.
    # Also conflict with some method (I don't remember).
    cascade_invocations: false

    # Sometimes, VSCode formatter can't format long String.
    lines_longer_than_80_chars: false

    # It's better to give print in failure message.
    avoid_print: false

    # Sometime, you need to cache first 
    # the return value to use it later.
    join_return_with_assignment: false